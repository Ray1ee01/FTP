# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 900)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(-1, 0, 1201, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.ipEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.ipEdit.setObjectName("ipEdit")
        self.horizontalLayout.addWidget(self.ipEdit)
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.portEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.portEdit.setObjectName("portEdit")
        self.horizontalLayout.addWidget(self.portEdit)
        self.label_3 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        self.userEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.userEdit.setObjectName("userEdit")
        self.horizontalLayout.addWidget(self.userEdit)
        self.label_4 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout.addWidget(self.label_4)
        self.passEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.passEdit.setObjectName("passEdit")
        self.horizontalLayout.addWidget(self.passEdit)
        self.pasvButton = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        self.pasvButton.setObjectName("pasvButton")
        self.horizontalLayout.addWidget(self.pasvButton)
        self.portButton = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        self.portButton.setObjectName("portButton")
        self.horizontalLayout.addWidget(self.portButton)
        self.connectButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.connectButton.setObjectName("connectButton")
        self.horizontalLayout.addWidget(self.connectButton)
        self.cmdBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.cmdBrowser.setGeometry(QtCore.QRect(10, 80, 541, 501))
        self.cmdBrowser.setObjectName("cmdBrowser")
        self.localWidget = QtWidgets.QTreeWidget(self.centralwidget)
        self.localWidget.setGeometry(QtCore.QRect(570, 80, 621, 211))
        self.localWidget.setObjectName("localWidget")
        self.localWidget.headerItem().setText(0, "1")
        self.localWidget.setHeaderLabels(['Name', 'Size', 'Mode', 'Last Time'])
        
        self.remoteWidget = QtWidgets.QTreeWidget(self.centralwidget)
        self.remoteWidget.setGeometry(QtCore.QRect(570, 300, 621, 231))
        self.remoteWidget.setObjectName("remoteWidget")
        self.remoteWidget.headerItem().setText(0, "1")
        self.remoteWidget.setHeaderLabels(['Name', 'Size', 'Mode', 'Last Time'])
        
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(10, 60, 72, 15))
        self.label_5.setObjectName("label_5")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(570, 540, 621, 41))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.cmdButton = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.cmdButton.setObjectName("cmdButton")
        self.horizontalLayout_2.addWidget(self.cmdButton)
        self.rnButton = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.rnButton.setObjectName("rnButton")
        self.horizontalLayout_2.addWidget(self.rnButton)
        self.rmdButton = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.rmdButton.setObjectName("rmdButton")
        self.horizontalLayout_2.addWidget(self.rmdButton)
        self.retrButton = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.retrButton.setObjectName("retrButton")
        self.horizontalLayout_2.addWidget(self.retrButton)
        self.storButton = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.storButton.setObjectName("storButton")
        self.horizontalLayout_2.addWidget(self.storButton)
        self.transWidget = QtWidgets.QTreeWidget(self.centralwidget)
        self.transWidget.setGeometry(QtCore.QRect(10, 590, 1181, 301))
        self.transWidget.setObjectName("transWidget")
        self.transWidget.headerItem().setText(0, "1")
        self.transWidget.header().setSortIndicatorShown(False)
        self.transWidget.setHeaderLabels(
            ['Down/Up','Local','Remote','Size','Status']
        )
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "IP"))
        self.label_2.setText(_translate("MainWindow", "PORT"))
        self.label_3.setText(_translate("MainWindow", "USER"))
        self.label_4.setText(_translate("MainWindow", "PASS"))
        self.pasvButton.setText(_translate("MainWindow", "PASV"))
        self.portButton.setText(_translate("MainWindow", "PORT"))
        self.connectButton.setText(_translate("MainWindow", "connect"))
        self.label_5.setText(_translate("MainWindow", "Command"))
        self.cmdButton.setText(_translate("MainWindow", "Create"))
        self.rnButton.setText(_translate("MainWindow", "Rename"))
        self.rmdButton.setText(_translate("MainWindow", "Remove"))
        self.retrButton.setText(_translate("MainWindow", "Download"))
        self.storButton.setText(_translate("MainWindow", "Upload"))

class FTPClient(QMainWindow,Ui_MainWindow):
    def __init__(self,parent=None):
        super(FTPClient,self).__init__(parent)
        self.setupUi(self)
        self.conn_fd = None
        self.tran_fd = None
        self.listen_fd = None
        self.tran_mode = 'PASV'
        self.local_ip = ''
        self.last_resp = ''
        self.cmdBrowser = None
        self.port = 21

        self.pasvButton.clicked.connect(self.set_PASV)
        self.portButton.clicked.connect(self.set_PORT)
        # TODO connect signal and slot
    def get_msg(self):
        self.last_resp=self.conn_fd.recv(256).decode().replace('\r\n','')
        self.cmdBrowser.setText('server: '+self.last_resp)
    def post_msg(self,msg):
        msg+='\r\n'
        self.conn_fd.send(msg.encode('utf-8'))
        self.cmdBrowser.setText('client: '+msg)

        
    # combine connect, USER and PASS
    def login(self,user,pswd):        
        # get local ip
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(('8.8.8.8', 80))
            self.local_ip = s.getsockname()[0]
        finally:
            s.close()
        # get available port
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.bind(("", 0))
            self.port = s.getsockname()[1]
        finally:
            s.close()
        # connect
        try:
            self.conn_fd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.conn_fd.connect((self.ip,self.host))
            self.get_msg()
            self.post_msg('USER '+user)
            self.get_msg()
            self.post_msg('PASS '+pswd)
        except Exception as e:
            print(str(e))
    def set_PASV(self):
        self.tran_mode='PASV'
    def set_PORT(self):      
        self.tran_mode='PORT'  
    def PASV(self):
        self.get_msg()
        host = re.search(r'(\d*),(\d*),(\d*),(\d*),(\d*),(\d*)',self.last_resp).split(',')
        ip='.'.join(match[:4])
        port = int(host[4])*256+int(host[5])
        self.tran_fd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.tran_fd.connect((ip, port))
    def PORT(self):
        self.listen_fd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.listen_fd.bind(('',0))
        port = self.listen_fd.getsockname()[1]
        self.listen_fd.listen(1)
        self.post_msg('PORT '+str(self.local_ip).replace('.',',')+','+str(int(port/256))+str(port%256))
        self.get_msg()
        self.tran_fd,_=self.listen_fd.accept()
    def TYPE(self):
        self.post_msg('TYPE I')
        self.get_msg()
    def SYST(self):
        self.post_msg('SYST')
        self.get_msg()
    def PWD(self):
        self.post_msg('PWD')
        self.get_msg()
    def CWD(self,params):
        self.post_msg('CWD '+params)
        self.get_msg()
    def MKD(self,params):
        self.post_msg('MKD '+params)
        self.get_msg()
    def RMD(self,params):
        self.post_msg('RMD '+params)
        self.get_msg()
    def RNFR(self,params):
        self.post_msg('RNFR '+params)
        self.get_msg()
    def RNTO(self,params):
        self.post_msg('RNTO '+params)
        self.get_msg()
    def LIST(self,params):
        self.BuildDTP()
        self.post_msg('LIST '+params)
        # TODO
        self.get_msg()
        self.tran_fd.close()
    def RETR(self,source_file,dest_file):
        self.BuildDTP()
        self.post_msg('RETR '+params)
        self.get_msg()
        # TODO
    def STOR(self,source_file,dest_file):
        self.BuildDTP()
        self.post_msg('STOR'+params)
        self.get_msg()
        # TODO
    def BuildDTP(self):
        if self.tran_mode == 'PASV':
            self.PASV()
        elif self.tran_mode == 'PORT':
            self.PORT()
    
